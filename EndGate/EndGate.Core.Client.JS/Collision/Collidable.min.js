var EndGate;(function(n){(function(n){(function(t){var i=function(){function t(i){this._type="Collidable",this._boundsType="Collidable";for(var r in i)this[r]=i[r];this._disposed=!1,this.ID=t._collidableIDs++,this.OnCollision=new n.Utilities.EventHandler,this.OnDisposed=new n.Utilities.EventHandler}return t._collidableIDs=0,t.prototype.IsCollidingWith=function(n){return this.Intersects(n)},t.prototype.Collided=function(n){this.OnCollision.Trigger(n)},t.prototype.Dispose=function(){if(this._disposed)throw new Error("Cannot dispose collidable twice.");else this._disposed=!0,this.OnDisposed.Trigger(this)},t.prototype.ContainsPoint=function(){throw new Error("This method is abstract!");},t.prototype.Intersects=function(n){if(n._type==="BoundingCircle")return this.IntersectsCircle(n);if(n._type==="BoundingRectangle")return this.IntersectsRectangle(n);throw new Error("Cannot intersect with unidentifiable object, must be BoundingCircle or BoundingRectangle");},t.prototype.IntersectsCircle=function(){throw new Error("This method is abstract!");},t.prototype.IntersectsRectangle=function(){throw new Error("This method is abstract!");},t}();t.Collidable=i})(n.Collision||(n.Collision={}));var t=n.Collision})(n.Core||(n.Core={}));var t=n.Core})(EndGate||(EndGate={}))